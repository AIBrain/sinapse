/*********************************************************************************
 *  Code generated by Sinapse Neural Networking Tool in {0}\n", DateTime.Now);
 * ----------------------------------------------------------------------------- *
 *                                                                               *
 *  You are free to use this code for any purpose you wish, in any application   *
 *  under any licensing terms, but only if you add a user-visible reference to   *
 *  the use of Sinapse inside your program and don't separate the generated code *
 *  from this disclaimer. Also, please pay attention to the following notice:    *
 *                                                                               *
 *      This code was generated in the hope that it will be useful,              *
 *      but WITHOUT ANY WARRANTY; without even the implied warranty              *
 *      of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                  *
 *                                                                               *
 *      Sinapse developer(s) are not and cannot be liable for any direct,        *
 *      indirect, incidental, special, exemplary or consequential damages,       *
 *      including, but not limited to, procurement of substitute goods or        *
 *      services; loss of use, data, profits or business interruption.           *
 *                                                                               *
 *********************************************************************************/

using System;
using System.Collections.Generic;
using System.Text;

namespace NNApplication
{

    class NeuralNetwork
    {

        #region Internal Structures & Classes
        private struct NetworkColumn
        {
            string name;
            bool category;
            double rangeMax;
            double rangeMin;
            string[] categories;
        }

        private struct Neuron
        {
            double Bias;
            double[] Weights;
        }
        #endregion


        //---------------------------------------------


        private Neuron[][] network;
        private NetworkColumn[] columns;


        //---------------------------------------------


        #region Constructor
        public NeuralNetwork()
        {
            #region Sinapse Generated Code
            [initialization]
            #endregion
        }
        #endregion


        //---------------------------------------------


        #region Properties
        public NetworkColumn[] NetworkColumns
        {
            get { return this.columns; }
        }
        #endregion


        //---------------------------------------------


        #region Computing Functions
        public void Compute(double[][] input, out double[][] output)
        {
            output = new double[input.GetLength(0)];
            
            for (int i = 0; i < input.GetLength(0); ++i)
            {
                this.Compute(input[i], out output[i]);
            }
        }

        public void Compute(double[] input, out double[] output)
        {
            output = input;

            // compute each layer
            for (int i = 0; i < this.NumberOfLayers(); ++i)
            {
                this.Compute(output, out output, i);
            }

            return output;
        }

        public void Compute(double input, out double[] output, int layer)
        {
            output = new double[this.NumberOfNeurons(layer)];

            // compute each neuron
            for (int i = 0; i < this.NumberOfNeurons(layer); ++i)
            {
                this.Compute(input, out output[i], layer, i);
            }
        }

        public void Compute(double input, out double output, int layer, int neuron)
        {
            double sum = 0.0;

            // compute weighted sum of inputs
            for (int i = 0; i < inputsCount; i++)
            {
                sum += network[i][j].Weights[i] * input[i];
            }

            sum += network[i][j].Bias;
            output = this.ActivationFunction(sum);
        }

        public double ActivationFunction(double x)
        {
            return [activationfunction];
        }
        #endregion


        //---------------------------------------------


        #region Data Normalization Functions
        public double Normalize(NetworkColumn column, double value)
        {
        }

        public double Normalize(NetworkColumn column, string value)
        {
        }

        public void Revert(NetworkColumn column, double norm, out double value)
        {
        }

        public void Revert(NetworkColumn column, double norm, out string value)
        {
        }
        #endregion


        //---------------------------------------------


        #region Misc Functions
        public int NumberOfLayers()
        {
            return network.GetLength(0);
        }

        public int NumberOfNeurons(int layer)
        {
            return network[layer].GetLength(0);
        }

        public int NumberOfInputs(int layer, int neuron)
        {
            return network[layer][neuron].GetLength(0);
        }
        #endregion

    }
}
