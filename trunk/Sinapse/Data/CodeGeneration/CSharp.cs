/***************************************************************************
 *   Sinapse Neural Networking Tool         http://sinapse.googlecode.com  *
 *  ---------------------------------------------------------------------- *
 *   Copyright (C) 2006-2008 Cesar Roberto de Souza <cesarsouza@gmail.com> *
 *                                                                         *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 3 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 ***************************************************************************/

using System;
using System.Collections.Generic;
using System.Text;

using AForge;
using AForge.Neuro;

using Sinapse.Data.Network;


namespace Sinapse.Data.CodeGeneration
{
    internal sealed class CSharp : CodeGenerator
    {

        public CSharp(NetworkContainer network)
            : base(network)
        {
        }


        protected override void build(StringBuilder cB)
        {
            cB.AppendLine("/******************************************************************************");
            cB.AppendFormat("*  Code generated by Sinapse Neural Networking Tool in {0}\n", DateTime.Now);
            cB.AppendLine("* -----------------------------------------------------------------------------");
            cB.AppendLine("*");
            cB.AppendLine("*  You are free to use this code for any purpose you wish, in any application");
            cB.AppendLine("*  under any licensing terms, but only if you add a user-visible reference to");
            cB.AppendLine("*  the use of Sinapse inside your program and don't separate the generated code");
            cB.AppendLine("   from this disclaimer. Also, please pay attention to the following notice:");
            cB.AppendLine("*");
            cB.AppendLine("*      This code was generated in the hope that it will be useful,");
            cB.AppendLine("*      but WITHOUT ANY WARRANTY; without even the implied warranty");
            cB.AppendLine("*      of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.");
            cB.AppendLine("*");
            cB.AppendLine("*      Sinapse developer(s) are not and cannot be liable for any direct,");
            cB.AppendLine("*      indirect, incidental, special, exemplary or consequential damages,");
            cB.AppendLine("*      including, but not limited to, procurement of substitute goods or");
            cB.AppendLine("*      services; loss of use, data, profits or business interruption.");
            cB.AppendLine("*");
            cB.AppendLine("*******************************************************************************/");
            cB.AppendLine();
            cB.AppendLine("using System;");
            cB.AppendLine("using System.Collections.Generic;");
            cB.AppendLine("using System.Text;");
            cB.AppendLine();
            cB.AppendLine("namespace NNApplication");
            cB.AppendLine("{");
            cB.AppendLine("    class NeuralNetwork");
            cB.AppendLine("    {");
            cB.AppendLine();
            cB.AppendLine("        public NeuralNetwork()");
            cB.AppendLine("        {");
            cB.AppendLine("        }");
            cB.AppendLine();
            cB.AppendLine();
            cB.AppendLine();
            cB.AppendLine();
            cB.AppendLine();
            cB.AppendLine();
            cB.AppendLine("    }");
            cB.AppendLine("}");

        }

        private string createInputLayerFormula(Layer layer)
        {
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < this.Network.Schema.InputColumns.Length; ++i )
            {
                sb.AppendFormat("{0} * {1}", layer[i][0], this.Network.Schema.InputColumns[i]);
                if (i < this.Network.Schema.InputColumns.Length - 1)
                    sb.Append(" + ");
            }
            return sb.ToString();
        }

        private string createOuputLayerFormula()
        {
            return String.Empty;
        }

        private string createLayerFormula()
        {
            return String.Empty;
        }

        private string createNetworkFormula()
        {
            return String.Empty;
        }

        private string createNormalizationFunctions()
        {
            StringBuilder sb = new StringBuilder();

            DoubleRange from, to;
            foreach (String col in this.Network.Schema.AllColumns)
            {

                from = this.Network.Schema.DataRanges.GetRange(col);
                to = this.Network.Schema.DataRanges.ActivationFunctionRange;
                      
                if ((this.Network.Schema.IsCategory(col)))
                {
                    sb.AppendFormat("private double normalize_{0}(string value)\n", col.Replace(" ", "_"));
                    sb.AppendLine("{");
                    sb.AppendLine("   double id;");
                    sb.AppendLine();
                    sb.AppendLine("   switch (value)");
                    sb.AppendLine("   {");

                    foreach (DataCategory category in this.Network.Schema.DataCategories.GetCaptionList(col))
                    {
                        sb.AppendFormat("      case {0}:\n", category.Value);
                        sb.AppendFormat("         id = {0};\n", category.Id);
                        sb.AppendLine  ("      break;\n\n");
                    }
                    sb.AppendLine("   }");
                    
                    sb.AppendLine("}");
                }
                else
                {
                    sb.AppendFormat("private double normalize_{0}(double value)\n", col.Replace(" ", "_"));
                    sb.AppendLine("{");
                }
                // return ((value - from.Min) * (to.Length) / (from.Length)) + to.Min;
                sb.AppendFormat("return ((value - {0}) * ({1}) / ({2}) + {3};",from.Min,to.Length,from.Length, to.Min);
                sb.Append("}\n\n");
            }

            return sb.ToString();
        }

        private string createRevertFunctions()
        {
            StringBuilder sb = new StringBuilder();
            return sb.ToString();
        }
    }
}
